Find all unique combinations of numbers that sum to a target. Write its algorithm, program. Find its time and space complexities. Explain with suitable example. 

Answer -

Algorithm (Backtracking)
Start with an empty combination.

Loop through the candidates from the current index.

If the candidate number is smaller or equal to the remaining target:

Add it to the current combination.

Recursively explore with reduced target (target - current number), allowing the same number to be reused.

If the target becomes 0, add the combination to the result.

Backtrack by removing the last number and try the next one.

code-
import java.util.ArrayList;
import java.util.List;

public class CombinationSumSolver {

    public static void findCombinations(int[] candidates, int target, int index, List<Integer> current, List<List<Integer>> result) {
        if (target == 0) {
            result.add(new ArrayList<>(current)); 
            return;
        }

        for (int i = index; i < candidates.length; i++) {
            if (candidates[i] <= target) {
                current.add(candidates[i]);  
                findCombinations(candidates, target - candidates[i], i, current, result);  \
                current.remove(current.size() - 1);
            }
        }
    }

    public static void main(String[] args) {
        int[] candidates = {2, 3, 6, 7};
        int target = 7;

        List<List<Integer>> result = new ArrayList<>();
        findCombinations(candidates, target, 0, new ArrayList<>(), result);

        System.out.println("Unique combinations that sum to " + target + ":");
        for (List<Integer> combination : result) {
            System.out.println(combination);
        }
    }
}

Complexity | Value
Time Complexity | O(2^(target / min(candidate)))
Space Complexity | O(target) (recursion) + output size
