How to merge two sorted linked lists into one sorted list. Write its algorithm, program. 
Find its time and space complexities. Explain with suitable example. 
Answer-

Algorithm:
Create a dummy node to simplify handling the head of the new merged list.

Use a pointer (current) starting at the dummy node.

Compare the current nodes of both linked lists:

If list1.data is smaller, link current.next to list1 and move list1 to the next node.

Otherwise, link current.next to list2 and move list2 to the next node.

Move the current pointer forward.

When either list1 or list2 is fully traversed, link current.next to the remaining nodes of the other list.

Return dummy.next (this skips the placeholder and points to the real head).

code -
class ListNode {
    int val;
    ListNode next;
    ListNode(int val) { this.val = val; }
}

public class MergeSortedLinkedLists {

    public static ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        while (list1 != null && list2 != null) {
            if (list1.val <= list2.val) {
                current.next = list1;
                list1 = list1.next;
            } else {
                current.next = list2;
                list2 = list2.next;
            }
            current = current.next;
        }

      
        if (list1 != null) {
            current.next = list1;
        } else {
            current.next = list2;
        }

        return dummy.next;  
    }

   
    public static void printList(ListNode head) {
        while (head != null) {
            System.out.print(head.val + " ");
            head = head.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
       
        ListNode list1 = new ListNode(1);
        list1.next = new ListNode(3);
        list1.next.next = new ListNode(5);

       
        ListNode list2 = new ListNode(2);
        list2.next = new ListNode(4);
        list2.next.next = new ListNode(6);

        System.out.print("List 1: ");
        printList(list1);
        System.out.print("List 2: ");
        printList(list2);

        ListNode merged = mergeTwoLists(list1, list2);

        System.out.print("Merged List: ");
        printList(merged);
    }
}
Time Complexity:
O(n + m)
Where n = number of nodes in list1 and m = number of nodes in list2.
Each node is visited exactly once.

Space Complexity:
O(1)
No new nodes are created, only pointers are rearranged.
If a recursive approach was used, the space complexity would be O(n + m) due to the call stack.=-
