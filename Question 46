Write a program to find the longest palindromic substring in a given string. Write its algorithm, program. Find its time and space complexities. Explain with 
suitable example.

Answer-

Algorithm Steps:

Initialize start = 0 and maxLength = 1 (the minimum palindrome is a single character).

Loop through the string, treating each character (and each pair of characters) as the potential center of a palindrome.

Expand outward from the center as long as the characters on both sides are the same.

If a longer palindrome is found, update start and maxLength.

At the end, return the substring starting at start of length maxLength.

code-

public class LongestPalindromicSubstring {

    public static String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";

        int start = 0, end = 0;

        for (int i = 0; i < s.length(); i++) {
            int len1 = expandFromCenter(s, i, i);     
            int len2 = expandFromCenter(s, i, i + 1); 
            int len = Math.max(len1, len2);
            
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }

        return s.substring(start, end + 1);
    }

    private static int expandFromCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;
    }

    public static void main(String[] args) {
        String s = "babad";
        String result = longestPalindrome(s);
        System.out.println("Longest Palindromic Substring: " + result);
    }
}

Time Complexity: O(nÂ²).

Space Complexity: O(1).
