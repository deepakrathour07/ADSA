Implement two stacks in a single array. Write its algorithm, program. Find its time and 
space complexities. Explain with suitable example.
Answer -

Algorithm Explanation
Idea:

One stack (stack1) starts from the beginning (index 0).

The second stack (stack2) starts from the end (index n-1).

Both stacks grow toward each other.

Overflow happens only if both stacks meet in the middle.

Steps:

top1 = -1 — tracks the top of Stack 1.

top2 = size — tracks the top of Stack 2.

Push Operation:
Stack1:

Before pushing, check top1 + 1 < top2 (free space exists).

If true: arr[++top1] = value.

Stack2:

Before pushing, check top1 < top2 - 1 (free space exists).

If true: arr[--top2] = value.

Pop Operation:
Stack1: If top1 >= 0 — arr[top1--].

Stack2: If top2 < size — arr[top2++].

code -
public class TwoStacks {
    int size;
    int top1, top2;
    int arr[];

    TwoStacks(int n) {
        size = n;
        arr = new int[n];
        top1 = -1;
        top2 = n;
    }

    public void push1(int x) {
        if (top1 < top2 - 1) {
            arr[++top1] = x;
        } else {
            System.out.println("Stack Overflow for Stack 1");
        }
    }

    public void push2(int x) {
        if (top1 < top2 - 1) {
            arr[--top2] = x;
        } else {
            System.out.println("Stack Overflow for Stack 2");
        }
    }

    public int pop1() {
        if (top1 >= 0) {
            return arr[top1--];
        } else {
            System.out.println("Stack Underflow for Stack 1");
            return -1;
        }
    }

    public int pop2() {
        if (top2 < size) {
            return arr[top2++];
        } else {
            System.out.println("Stack Underflow for Stack 2");
            return -1;
        }
    }

    public static void main(String[] args) {
        TwoStacks ts = new TwoStacks(10);

        ts.push1(5);
        ts.push1(10);
        ts.push2(15);
        ts.push2(20);

        System.out.println("Popped from Stack1: " + ts.pop1());  
        System.out.println("Popped from Stack2: " + ts.pop2());  
    }
}

Time Complexity	O(1) for all operations
Space Complexity	O(n)
