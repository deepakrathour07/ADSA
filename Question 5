Find the maximum sum of any subarray of size K in a given array. Write its algorithm, 
program. Find its time and space complexities. Explain with suitable example.  
Answer- 

Algorithm (Sliding Window):
Input: Array arr[] of size n, integer K.

Calculate the sum of the first K elements (windowSum).

Initialize maxSum = windowSum.

Loop from i = K to n - 1:

Slide the window:
windowSum = windowSum + arr[i] - arr[i - K]

Update maxSum if windowSum is larger.

Return maxSum

code -
public class MaxSubarraySumOfSizeK {

    public static int maxSubarraySum(int[] arr, int K) {
        int n = arr.length;

        if (n < K) {
            System.out.println("Window size K is larger than array size!");
            return -1;
        }

        int windowSum = 0;
        for (int i = 0; i < K; i++) {
            windowSum += arr[i];
        }

        int maxSum = windowSum;

        for (int i = K; i < n; i++) {
            windowSum += arr[i] - arr[i - K];
            maxSum = Math.max(maxSum, windowSum);
        }

        return maxSum;
    }

    public static void main(String[] args) {
        int[] arr = {2, 1, 5, 1, 3, 2};
        int K = 3;

        int result = maxSubarraySum(arr, K);
        System.out.println("Maximum sum of subarray of size " + K + " = " + result);
    }
}
Time Complexity	O(n)
Space Complexity	O(1)
