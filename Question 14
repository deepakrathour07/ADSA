Find the median of two sorted arrays using binary search. Write its algorithm, program. Find its time and space complexities. Explain with suitable example. 
Answer-

Algorithm: Binary Search Partition Method
Assume nums1 is the smaller array.
(If not, swap nums1 and nums2 to ensure binary search is performed on the smaller one.)

Set two pointers:

low = 0

high = length of nums1.

Perform binary search:

Partition nums1 at partitionX (midpoint) and nums2 at partitionY = (totalLength + 1) / 2 - partitionX.

Compute:

ini
Copy
Edit
maxLeftX = (partitionX == 0) ? -∞ : nums1[partitionX - 1]
minRightX = (partitionX == nums1.length) ? ∞ : nums1[partitionX]
maxLeftY = (partitionY == 0) ? -∞ : nums2[partitionY - 1]
minRightY = (partitionY == nums2.length) ? ∞ : nums2[partitionY]
Check conditions:

If maxLeftX <= minRightY and maxLeftY <= minRightX:

If the combined array is even:

ini
Copy
Edit
median = (max(maxLeftX, maxLeftY) + min(minRightX, minRightY)) / 2.0
If odd:

ini
Copy
Edit
median = max(maxLeftX, maxLeftY)
If maxLeftX > minRightY:
→ move left (high = partitionX - 1).

Else:
→ move right (low = partitionX + 1).

code- 

public class MedianOfTwoSortedArrays {

    public static double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1.length > nums2.length) {
            return findMedianSortedArrays(nums2, nums1); 
        }

        int x = nums1.length;
        int y = nums2.length;
        int low = 0, high = x;

        while (low <= high) {
            int partitionX = (low + high) / 2;
            int partitionY = (x + y + 1) / 2 - partitionX;

            int maxLeftX = (partitionX == 0) ? Integer.MIN_VALUE : nums1[partitionX - 1];
            int minRightX = (partitionX == x) ? Integer.MAX_VALUE : nums1[partitionX];

            int maxLeftY = (partitionY == 0) ? Integer.MIN_VALUE : nums2[partitionY - 1];
            int minRightY = (partitionY == y) ? Integer.MAX_VALUE : nums2[partitionY];

            if (maxLeftX <= minRightY && maxLeftY <= minRightX) {
                if ((x + y) % 2 == 0) {
                    return (Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2.0;
                } else {
                    return Math.max(maxLeftX, maxLeftY);
                }
            } else if (maxLeftX > minRightY) {
                high = partitionX - 1;  
            } else {
                low = partitionX + 1;  
            }
        }

        throw new IllegalArgumentException("Input arrays are not sorted or valid.");
    }

    public static void main(String[] args) {
        int[] nums1 = {1, 3, 8};
        int[] nums2 = {7, 9, 10, 11};

        double median = findMedianSortedArrays(nums1, nums2);
        System.out.println("Median is: " + median);
    }
}
Time Complexity:
O(log(min(n, m)))
Only the smaller array is searched via binary search.

Space Complexity:
O(1)
No extra space is used except for variables.
