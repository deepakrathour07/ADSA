Remove the n-th node from the end of a singly linked list. Write its algorithm, program. Find its time and space complexities. Explain with suitable example. 
Answer-

Algorithm (Two-pointer Technique)
Initialize two pointers: first and second, both at the head.

Advance the first pointer n steps forward. This creates a gap of n nodes.

Move both pointers (first and second) one step at a time until first reaches the end.

Now second will be just before the node to remove.

Adjust pointers to skip the target node.

code-
class RemoveNthFromEnd {
   
    static class ListNode {
        int val;
        ListNode next;
        ListNode(int x) {
            val = x;
            next = null;
        }
    }

    public static ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(0);  // Dummy node simplifies edge cases
        dummy.next = head;
        ListNode first = dummy;
        ListNode second = dummy;

        for (int i = 0; i <= n; i++) {
            if (first != null) {
                first = first.next;
            }
        }

        while (first != null) {
            first = first.next;
            second = second.next;
        }

        second.next = second.next.next;

        return dummy.next;
    }

   
    public static void printList(ListNode head) {
        while (head != null) {
            System.out.print(head.val + " -> ");
            head = head.next;
        }
        System.out.println("null");
    }

    
    public static void main(String[] args) {
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);

        System.out.println("Original List:");
        printList(head);

        int n = 2;
        head = removeNthFromEnd(head, n);

        System.out.println("List after removing " + n + "th node from the end:");
        printList(head);
    }
}
O(L) — where L is the length of the linked list.
O(1) — constant extra space.
