Find the longest common prefix among a list of strings. Write its algorithm, program. 
Find its time and space complexities. Explain with suitable example. 
Answer-
 
Algorithm (Horizontal Scanning):
Assume the first string is the prefix.

Iterate through the rest of the strings:

While the current string does not start with prefix, trim the last character from prefix.

Repeat until prefix is empty or matches.

If prefix becomes empty, return "" (no common prefix).

Return the final prefix when done.

code -
public class LongestCommonPrefix {

    public static String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) return "";

        String prefix = strs[0];

        for (int i = 1; i < strs.length; i++) {
            while (strs[i].indexOf(prefix) != 0) {  
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) return ""; 
            }
        }

        return prefix;
    }

    public static void main(String[] args) {
        String[] input = {"flower", "flow", "flight"};
        String result = longestCommonPrefix(input);
        System.out.println("Longest Common Prefix: \"" + result + "\"");
    }
}
Time Complexity	O(n * m)
Space Complexity	O(1)
