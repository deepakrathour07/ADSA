Solve the problem of finding the top K frequent elements in an array. Write its algorithm, program. Find its time and space complexities. Explain with suitable 
example.

Answer-

Algorithm
Count Frequencies:
Use a HashMap to store the frequency of each element.

Build Max Heap (PriorityQueue):
Use a Max Heap to keep the elements ordered by frequency.

Extract Top K Elements:
Poll the heap k times to get the most frequent elements.

code-
import java.util.*;

public class TopKFrequentElements {

    public static int[] topKFrequent(int[] nums, int k) {
        
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : nums) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        PriorityQueue<Map.Entry<Integer, Integer>> maxHeap = 
                new PriorityQueue<>((a, b) -> b.getValue() - a.getValue());

        maxHeap.addAll(frequencyMap.entrySet());

        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            result[i] = maxHeap.poll().getKey();
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {1, 1, 1, 2, 2, 3};
        int k = 2;

        int[] topK = topKFrequent(nums, k);

        System.out.println("Top " + k + " frequent elements are: " + Arrays.toString(topK));
    }
}

Time Complexity: O(n log n)

Space Complexity: O(n)
