Calculate how much water can be trapped between the bars of a histogram. Write its 
algorithm, program. Find its time and space complexities. Explain with suitable example. 
Answer -

Algorithm: (Two-Pointer Technique — Optimal Solution)
Initialize two pointers:
left = 0, right = n - 1.
Two variables to track max heights: leftMax = 0, rightMax = 0.

Loop until left < right:

If height[left] < height[right]:

If height[left] >= leftMax:
Update leftMax = height[left].

Else:
Water trapped = leftMax - height[left].

Move left one step right.

Else:

If height[right] >= rightMax:
Update rightMax = height[right].

Else:
Water trapped = rightMax - height[right].

Move right one step left.

Sum up the trapped water for all positions.



Program:

public class TrappingRainWater {

    public static int trap(int[] height) {
        if (height == null || height.length == 0) return 0;

        int left = 0, right = height.length - 1;
        int leftMax = 0, rightMax = 0;
        int trappedWater = 0;

        while (left < right) {
            if (height[left] < height[right]) {
                if (height[left] >= leftMax) {
                    leftMax = height[left];
                } else {
                    trappedWater += leftMax - height[left];
                }
                left++;
            } else {
                if (height[right] >= rightMax) {
                    rightMax = height[right];
                } else {
                    trappedWater += rightMax - height[right];
                }
                right--;
            }
        }

        return trappedWater;
    }

    public static void main(String[] args) {
        int[] height = {0,1,0,2,1,0,1,3,2,1,2,1};
        int water = trap(height);
        System.out.println("Total water trapped: " + water + " units");
    }
}

Time Complexity:
O(n) —
Single pass through the array.

Space Complexity:
O(1) —
No extra space beyond a few variables.
