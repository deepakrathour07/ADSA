Solve the problem of finding the next greater element for each element in an array. Write its algorithm, program. Find its time and space complexities. Explain with 
suitable example.
Answer-

Algorithm Explanation (Using Stack)
Idea:
Use a stack to keep track of elements whose NGE hasn't been found yet. Traverse the array from right to left.

Steps:

Initialize an empty stack and a result array.

Traverse the input array from right to left.

For each element:

While the stack is not empty and the top element is smaller or equal, pop from the stack.

If the stack is empty after the loop, there’s no greater element — assign -1.

Otherwise, the stack's top is the Next Greater Element.

Push the current element onto the stack.

Continue until all elements are processed.

code -
import java.util.Stack;

public class NextGreaterElement {

    public static int[] findNextGreaterElements(int[] nums) {
        int n = nums.length;
        int[] result = new int[n];
        Stack<Integer> stack = new Stack<>();

        for (int i = n - 1; i >= 0; i--) {
            int current = nums[i];

            while (!stack.isEmpty() && stack.peek() <= current) {
                stack.pop();
            }

            result[i] = stack.isEmpty() ? -1 : stack.peek();

            stack.push(current);
        }

        return result;
    }

    public static void main(String[] args) {
        int[] nums = {4, 5, 2, 25};
        int[] nge = findNextGreaterElements(nums);

        System.out.print("Next Greater Elements: ");
        for (int n : nge) {
            System.out.print(n + " ");
        }
    }
}
Time Complexity:	O(n)
Space Complexity:	O(n)
