Write a program to find the sum of elements in a given range [L, R] using a prefix sum 
array. Write its algorithm, program. Find its time and space complexities. Explain with 
suitable example.
answer - Algorithm:
Input: Array arr[], range [L, R]

Build a prefixSum[] array:

prefixSum[0] = arr[0]

For each i from 1 to n-1:
prefixSum[i] = prefixSum[i-1] + arr[i]

If L > 0:
sum = prefixSum[R] - prefixSum[L-1]
Else:
sum = prefixSum[R]

Return the sum.
code - 
public class PrefixSumRangeQuery {

    public static int[] computePrefixSum(int[] arr) {
        int n = arr.length;
        int[] prefixSum = new int[n];
        prefixSum[0] = arr[0];
        for (int i = 1; i < n; i++) {
            prefixSum[i] = prefixSum[i - 1] + arr[i];
        }
        return prefixSum;
    }

    
    public static int rangeSum(int[] prefixSum, int L, int R) {
        if (L == 0) {
            return prefixSum[R];
        } else {
            return prefixSum[R] - prefixSum[L - 1];
        }
    }

    public static void main(String[] args) {
        int[] arr = {2, 4, 7, 1, 3, 6, 5};  // Example array

        int[] prefixSum = computePrefixSum(arr);

        int L = 2;  // Starting index
        int R = 5;  // Ending index

        int sum = rangeSum(prefixSum, L, R);
        System.out.println("Sum of elements from index " + L + " to " + R + " = " + sum);
    }
}
Time Complexity:
Preprocessing: O(n) — to build the prefix sum array.

Query: O(1) — single subtraction.

🗃️ Space Complexity:
Extra space for prefixSum[]: O(n).
