Check if an array can be split into two parts such that the sum of the prefix equals the 
sum of the suffix. Write its algorithm, program. Find its time and space complexities. 
Explain with suitable example. 
answer-
 Algorithm:
Input: Array arr[] of size n.

Compute the total sum of all elements.

Initialize leftSum = 0.

Loop through the array:

At each index i, update leftSum by adding arr[i].

Calculate rightSum = totalSum - leftSum.

If leftSum == rightSum at any point → return true.

If the loop ends without finding such a point → return false.


code-
public class ArraySplitEqualSum {

    public static boolean canBeSplit(int[] arr) {
        int totalSum = 0;
        for (int num : arr) {
            totalSum += num;
        }

        int leftSum = 0;
        for (int i = 0; i < arr.length - 1; i++) {  
            leftSum += arr[i];
            int rightSum = totalSum - leftSum;

            if (leftSum == rightSum) {
                System.out.println("Split possible after index: " + i);
                return true;
            }
        }

        return false;
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 3};

        if (canBeSplit(arr)) {
            System.out.println("Array can be split into equal prefix and suffix sums.");
        } else {
            System.out.println("Array cannot be split into equal prefix and suffix sums.");
        }
    }
}
Time Complexity	O(n)
Space Complexity	O(1)
